import com.android.builder.BuilderConstants

apply plugin: 'android-library'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionCode 1
        versionName "1.0-SNAPSHOT"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        disable 'InvalidPackage', 'AllowBackup'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.android.support:support-v4:+'
    compile 'com.squareup.dagger:dagger:+'
    provided 'com.squareup.dagger:dagger-compiler:+'
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }

    artifacts.add('archives', task("jar${name.capitalize()}", dependsOn: variant.javaCompile, type: Jar) {
        from variant.javaCompile.destinationDir
        baseName "hilt-${android.defaultConfig.versionName}-${name}";
        include 'hilt/**'
    });

    artifacts.add('archives', task("sourcesJar${name.capitalize()}", dependsOn: variant.javaCompile, type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
        baseName "hilt-${android.defaultConfig.versionName}-${name}";
    });

}
android.libraryVariants.all { variant ->

    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.set("androidJar", "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar");
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        include 'hilt/**'
        exclude '**/build/**', '**/R.*'
    }

}